import React, { useState } from 'react';
import { ChevronDown, ChevronUp } from 'lucide-react';

interface IngredientSelectorProps {
  onIngredientsSelected: (ingredients: string[]) => void;
  loading?: boolean;
}

const IngredientSelector: React.FC<IngredientSelectorProps> = ({ 
  onIngredientsSelected, 
  loading = false 
}) => {
  const [selectedIngredients, setSelectedIngredients] = useState<string[]>([]);
  const [expandedSections, setExpandedSections] = useState<string[]>(['meats']);

  // Mapping from Hungarian ingredient names to English for API searches
  const ingredientMapping: { [hungarian: string]: string } = {
    // H√∫sok
    'Csirkemell': 'Chicken Breast',
    'Csirkecomb': 'Chicken Thighs',
    'Dar√°lt csirke': 'Ground Chicken',
    'Eg√©sz csirke': 'Whole Chicken',
    'Marhaszelet': 'Beef Steak',
    'Dar√°lt marha': 'Ground Beef',
    'Marhapecsenye': 'Beef Roast',
    'Marhaborda': 'Beef Ribs',
    'Sert√©sszelet': 'Pork Chops',
    'Dar√°lt sert√©s': 'Ground Pork',
    'Sert√©skaraj': 'Pork Tenderloin',
    'Szalonna': 'Bacon',
    'Pulykamell': 'Turkey Breast',
    'Dar√°lt pulyka': 'Ground Turkey',
    'B√°r√°ny': 'Lamb',
    'Halfil√©': 'Fish Fillet',
    'Lazac': 'Salmon',
    'Tonhal': 'Tuna',
    'Garn√©lar√°k': 'Shrimp',
    'R√°k': 'Crab',
    // Z√∂lds√©gek
    'Hagyma': 'Onion',
    'Fokhagyma': 'Garlic',
    'Paradicsom': 'Tomato',
    'Paprika': 'Bell Pepper',
    'R√©pa': 'Carrot',
    'Zeller': 'Celery',
    'Brokkoli': 'Broccoli',
    'Karfiol': 'Cauliflower',
    'Spen√≥t': 'Spinach',
    'Sal√°ta': 'Lettuce',
    'Uborka': 'Cucumber',
    'Cukkini': 'Zucchini',
    'Padlizs√°n': 'Eggplant',
    'Gomba': 'Mushrooms',
    'Burgonya': 'Potato',
    '√âdesburgonya': 'Sweet Potato',
    'Kukorica': 'Corn',
    'Z√∂ldbab': 'Green Beans',
    'Bors√≥': 'Peas',
    'Sp√°rga': 'Asparagus',
    'K√°poszta': 'Cabbage',
    'Kelk√°poszta': 'Kale',
    // Gy√ºm√∂lcs√∂k
    'Alma': 'Apple',
    'Ban√°n': 'Banana',
    'Narancs': 'Orange',
    'Citrom': 'Lemon',
    'Lime': 'Lime',
    'Eper': 'Strawberry',
    '√Åfonya': 'Blueberry',
    'M√°lna': 'Raspberry',
    'Szeder': 'Blackberry',
    'Sz≈ël≈ë': 'Grape',
    'Anan√°sz': 'Pineapple',
    'Mang√≥': 'Mango',
    'Avok√°d√≥': 'Avocado',
    '≈êszibarack': 'Peach',
    'K√∂rte': 'Pear',
    'Cseresznye': 'Cherry',
    'G√∂r√∂gdinnye': 'Watermelon',
    'S√°rgadinnye': 'Cantaloupe',
    'Kivi': 'Kiwi',
    'Gr√°n√°talma': 'Pomegranate',
    // Kamra
    'Toj√°s': 'Eggs',
    'Tej': 'Milk',
    'Vaj': 'Butter',
    'Sajt': 'Cheese',
    'Joghurt': 'Yogurt',
    'Tejsz√≠n': 'Cream',
    'Keny√©r': 'Bread',
    'Rizs': 'Rice',
    'T√©szta': 'Pasta',
    'Quinoa': 'Quinoa',
    'Zab': 'Oats',
    'Liszt': 'Flour',
    'Ol√≠vaolaj': 'Olive Oil',
    'K√≥kuszolaj': 'Coconut Oil',
    'Ecet': 'Vinegar',
    'Sz√≥jasz√≥sz': 'Soy Sauce',
    'M√©z': 'Honey',
    'S√≥': 'Salt',
    'Fekete bors': 'Black Pepper',
    'Fokhagymapor': 'Garlic Powder',
    'Paprikapor': 'Paprika',
    'K√∂m√©ny': 'Cumin',
    'Oreg√°n√≥': 'Oregano',
    'Bazsalikom': 'Basil',
    'Kakukkf≈±': 'Thyme',
    'Rozmaring': 'Rosemary',
    'Fah√©j': 'Cinnamon'
  };

  const ingredientCategories = {
    meats: {
      title: 'H√∫sok',
      items: [
        { name: 'Csirkemell', emoji: 'üêî' },
        { name: 'Csirkecomb', emoji: 'üêî' },
        { name: 'Dar√°lt csirke', emoji: 'üêî' },
        { name: 'Eg√©sz csirke', emoji: 'üêî' },
        { name: 'Marhaszelet', emoji: 'ü•©' },
        { name: 'Dar√°lt marha', emoji: 'ü•©' },
        { name: 'Marhapecsenye', emoji: 'ü•©' },
        { name: 'Marhaborda', emoji: 'ü•©' },
        { name: 'Sert√©sszelet', emoji: 'üê∑' },
        { name: 'Dar√°lt sert√©s', emoji: 'üê∑' },
        { name: 'Sert√©skaraj', emoji: 'üê∑' },
        { name: 'Szalonna', emoji: 'ü•ì' },
        { name: 'Pulykamell', emoji: 'ü¶É' },
        { name: 'Dar√°lt pulyka', emoji: 'ü¶É' },
        { name: 'B√°r√°ny', emoji: 'üêë' },
        { name: 'Halfil√©', emoji: 'üêü' },
        { name: 'Lazac', emoji: 'üêü' },
        { name: 'Tonhal', emoji: 'üêü' },
        { name: 'Garn√©lar√°k', emoji: 'ü¶ê' },
        { name: 'R√°k', emoji: 'ü¶Ä' }
      ]
    },
    vegetables: {
      title: 'Z√∂lds√©gek',
      items: [
        { name: 'Hagyma', emoji: 'üßÖ' },
        { name: 'Fokhagyma', emoji: 'üßÑ' },
        { name: 'Paradicsom', emoji: 'üçÖ' },
        { name: 'Paprika', emoji: 'ü´ë' },
        { name: 'R√©pa', emoji: 'ü•ï' },
        { name: 'Zeller', emoji: 'ü•¨' },
        { name: 'Brokkoli', emoji: 'ü•¶' },
        { name: 'Karfiol', emoji: 'ü•¨' },
        { name: 'Spen√≥t', emoji: 'ü•¨' },
        { name: 'Sal√°ta', emoji: 'ü•¨' },
        { name: 'Uborka', emoji: 'ü•í' },
        { name: 'Cukkini', emoji: 'ü•í' },
        { name: 'Padlizs√°n', emoji: 'üçÜ' },
        { name: 'Gomba', emoji: 'üçÑ' },
        { name: 'Burgonya', emoji: 'ü•î' },
        { name: '√âdesburgonya', emoji: 'üç†' },
        { name: 'Kukorica', emoji: 'üåΩ' },
        { name: 'Z√∂ldbab', emoji: 'ü´ò' },
        { name: 'Bors√≥', emoji: 'ü´õ' },
        { name: 'Sp√°rga', emoji: 'ü•¨' },
        { name: 'K√°poszta', emoji: 'ü•¨' },
        { name: 'Kelk√°poszta', emoji: 'ü•¨' }
      ]
    },
    fruits: {
      title: 'Gy√ºm√∂lcs√∂k',
      items: [
        { name: 'Alma', emoji: 'üçé' },
        { name: 'Ban√°n', emoji: 'üçå' },
        { name: 'Narancs', emoji: 'üçä' },
        { name: 'Citrom', emoji: 'üçã' },
        { name: 'Lime', emoji: 'üçã' },
        { name: 'Eper', emoji: 'üçì' },
        { name: '√Åfonya', emoji: 'ü´ê' },
        { name: 'M√°lna', emoji: 'üçá' },
        { name: 'Szeder', emoji: 'üçá' },
        { name: 'Sz≈ël≈ë', emoji: 'üçá' },
        { name: 'Anan√°sz', emoji: 'üçç' },
        { name: 'Mang√≥', emoji: 'ü•≠' },
        { name: 'Avok√°d√≥', emoji: 'ü•ë' },
        { name: '≈êszibarack', emoji: 'üçë' },
        { name: 'K√∂rte', emoji: 'üçê' },
        { name: 'Cseresznye', emoji: 'üçí' },
        { name: 'G√∂r√∂gdinnye', emoji: 'üçâ' },
        { name: 'S√°rgadinnye', emoji: 'üçà' },
        { name: 'Kivi', emoji: 'ü•ù' },
        { name: 'Gr√°n√°talma', emoji: 'üçé' }
      ]
    },
    pantry: {
      title: 'Kamra √©s egy√©b',
      items: [
        { name: 'Toj√°s', emoji: 'ü•ö' },
        { name: 'Tej', emoji: 'ü•õ' },
        { name: 'Vaj', emoji: 'üßà' },
        { name: 'Sajt', emoji: 'üßÄ' },
        { name: 'Joghurt', emoji: 'ü•õ' },
        { name: 'Tejsz√≠n', emoji: 'ü•õ' },
        { name: 'Keny√©r', emoji: 'üçû' },
        { name: 'Rizs', emoji: 'üçö' },
        { name: 'T√©szta', emoji: 'üçù' },
        { name: 'Quinoa', emoji: 'üåæ' },
        { name: 'Zab', emoji: 'üåæ' },
        { name: 'Liszt', emoji: 'üåæ' },
        { name: 'Ol√≠vaolaj', emoji: 'ü´í' },
        { name: 'K√≥kuszolaj', emoji: 'ü••' },
        { name: 'Ecet', emoji: 'üç∂' },
        { name: 'Sz√≥jasz√≥sz', emoji: 'üç∂' },
        { name: 'M√©z', emoji: 'üçØ' },
        { name: 'S√≥', emoji: 'üßÇ' },
        { name: 'Fekete bors', emoji: 'üå∂Ô∏è' },
        { name: 'Fokhagymapor', emoji: 'üßÑ' },
        { name: 'Paprikapor', emoji: 'üå∂Ô∏è' },
        { name: 'K√∂m√©ny', emoji: 'üåø' },
        { name: 'Oreg√°n√≥', emoji: 'üåø' },
        { name: 'Bazsalikom', emoji: 'üåø' },
        { name: 'Kakukkf≈±', emoji: 'üåø' },
        { name: 'Rozmaring', emoji: 'üåø' },
        { name: 'Fah√©j', emoji: 'üåø' }
      ]
    }
  };

  const toggleSection = (sectionKey: string) => {
    setExpandedSections(prev => 
      prev.includes(sectionKey) 
        ? prev.filter(key => key !== sectionKey)
        : [...prev, sectionKey]
    );
  };

  const toggleIngredient = (ingredientName: string) => {
    setSelectedIngredients(prev => {
      const newSelection = prev.includes(ingredientName)
        ? prev.filter(item => item !== ingredientName)
        : [...prev, ingredientName];
      
      return newSelection;
    });
  };

  const handleFindRecipes = () => {
    if (selectedIngredients.length > 0) {
      // Convert Hungarian ingredient names to English for API searches
      const englishIngredients = selectedIngredients.map(ingredient => 
        ingredientMapping[ingredient] || ingredient
      );
      onIngredientsSelected(englishIngredients);
    }
  };

  const clearSelection = () => {
    setSelectedIngredients([]);
  };

  return (
    <div className="space-y-4">
      <div className="bg-white rounded-lg border border-gray-200 shadow-sm">
        <div className="p-4 border-b border-gray-200">
          <h3 className="text-lg font-semibold text-gray-900">Hozz√°val√≥k kiv√°laszt√°sa</h3>
          <p className="text-sm text-gray-600 mt-1">
            V√°laszd ki az el√©rhet≈ë hozz√°val√≥kat receptek keres√©s√©hez
          </p>
        </div>

        <div className="p-4 space-y-3">
          {Object.entries(ingredientCategories).map(([key, category]) => (
            <div key={key} className="border border-gray-200 rounded-lg overflow-hidden">
              {/* Section Header */}
              <button
                onClick={() => toggleSection(key)}
                className="w-full px-4 py-3 bg-gray-50 hover:bg-gray-100 flex items-center justify-between transition-colors"
              >
                <span className="font-medium text-gray-900">{category.title}</span>
                <div className="flex items-center gap-2">
                  {selectedIngredients.some(ingredient => 
                    category.items.some(item => item.name === ingredient)
                  ) && (
                    <span className="bg-blue-600 text-white text-xs px-2 py-1 rounded-full">
                      {selectedIngredients.filter(ingredient => 
                        category.items.some(item => item.name === ingredient)
                      ).length}
                    </span>
                  )}
                  {expandedSections.includes(key) ? (
                    <ChevronUp className="w-5 h-5 text-gray-500" />
                  ) : (
                    <ChevronDown className="w-5 h-5 text-gray-500" />
                  )}
                </div>
              </button>

              {/* Section Content */}
              {expandedSections.includes(key) && (
                <div className="p-4 bg-white">
                  <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-2">
                    {category.items.map((item) => (
                      <button
                        key={item.name}
                        onClick={() => toggleIngredient(item.name)}
                        className={`px-3 py-2 text-sm rounded-md border transition-all flex items-center gap-2 ${
                          selectedIngredients.includes(item.name)
                            ? 'bg-blue-600 text-white border-blue-600 shadow-sm'
                            : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50 hover:border-gray-400'
                        }`}
                      >
                        <span>{item.emoji}</span>
                        <span>{item.name}</span>
                      </button>
                    ))}
                  </div>
                </div>
              )}
            </div>
          ))}
        </div>

        {/* Selected Ingredients Summary */}
        {selectedIngredients.length > 0 && (
          <div className="p-4 bg-gray-50 border-t border-gray-200">
            <div className="flex items-center justify-between mb-3">
              <h4 className="font-medium text-gray-900">
                Kiv√°lasztott hozz√°val√≥k ({selectedIngredients.length})
              </h4>
              <button
                onClick={clearSelection}
                className="text-sm text-gray-600 hover:text-gray-800"
              >
                √ñsszes t√∂rl√©se
              </button>
            </div>
            
            <div className="flex flex-wrap gap-2 mb-4">
              {selectedIngredients.map((ingredient) => (
                <span
                  key={ingredient}
                  className="inline-flex items-center gap-1 px-3 py-1 bg-blue-100 text-blue-800 text-sm rounded-full"
                >
                  {ingredient}
                  <button
                    onClick={() => toggleIngredient(ingredient)}
                    className="ml-1 hover:bg-blue-200 rounded-full p-0.5"
                  >
                    √ó
                  </button>
                </span>
              ))}
            </div>

            <button
              onClick={handleFindRecipes}
              disabled={loading || selectedIngredients.length === 0}
              className="w-full px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
            >
              {loading ? 'Receptek keres√©se...' : `Receptek keres√©se ${selectedIngredients.length} hozz√°val√≥val`}
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default IngredientSelector;
